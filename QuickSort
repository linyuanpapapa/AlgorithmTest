import edu.princeton.cs.algs4.StdRandom;

/**
 * @Author:LinYuan
 * @Description:
 * @Date: Create in 11:26 2019/7/31
 * @Modified By:
 */
public class QuickSort {
    public static void sort(Comparable[] a){
        StdRandom.shuffle(a);
        sort(a,0,a.length-1);
    }
    private static void sort(Comparable[] a,int lo,int hi){
        if(hi<=lo) return;
        int t=partition(a,lo,hi);
        sort(a,lo,t-1);
        sort(a,t+1,hi);

    }
    private static int partition(Comparable[] a,int lo,int hi){
        int k=lo,i=lo,j=hi+1;
        while(true){
            while(less(a[++i],a[k])) if(i==hi) break;
            while(less(a[k],a[--j])) if(j==lo) break;
            if(i>=j) break;
            exch(a,i,j);

        }
        exch(a,lo,j);
        return j;
    }

    private static boolean less(Comparable v,Comparable w){
        return v.compareTo(w)<0;
    }
    //compareTo()方法，v>w时返回1，相等时返回0，v<w时返回-1
    //less()方法，前者大于等于后者时返回0，前者小于后者时返回1；

    private static void exch(Comparable[] a,int i,int j){
        Comparable t=a[i];
        a[i]=a[j];
        a[j]=t;
    }
    private static void show(Comparable[] a){
        for(int i=0;i<a.length;i++)
            System.out.print(a[i]+"  ");
        System.out.println();
    }
    public static boolean isSorted(Comparable[] a){
        for(int i=1;i<a.length;i++)
            if(less(a[i],a[i-1]))  return false;//前者大于后者时，返回false
        return true;//排序正确时返回true
    }

    public static void main(String[] args) {
        String[] a={"bed","bug","yes","zoo","panda","all","yet","shit"};
        sort(a);
        assert isSorted(a);
        show(a);

    }
}
